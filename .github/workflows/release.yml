name: Build and Release

on:
  push:
    tags:
      - 'v*' # 当推送的标签以 v 开头时触发，例如 v1.0.0

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # 定义三个目标平台
        goos: [windows, darwin, linux]
        goarch: [amd64]
        include:
          - goos: windows
            extension: .exe
            asset_name: ClashRuleSync-windows-amd64.zip
            compress_cmd: zip -r
          - goos: darwin
            extension: ''
            asset_name: ClashRuleSync-macos-amd64.tar.gz
            compress_cmd: tar czf
          - goos: linux
            extension: ''
            asset_name: ClashRuleSync-linux-amd64.tar.gz
            compress_cmd: tar czf

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Get dependencies
        run: go mod download

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          go build -v -o "ClashRuleSync${{ matrix.extension }}" .
          
      - name: Prepare Package
        run: |
          mkdir -p release
          echo "请勿删除templates目录！此目录包含程序运行所需的网页模板文件，必须与主程序放在同一目录下。" > "重要说明-不要删除templates文件夹.txt"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            mkdir -p windows_package
            cp "ClashRuleSync${{ matrix.extension }}" windows_package/
            cp LICENSE windows_package/
            cp README.md windows_package/
            cp -r templates windows_package/
            cp -r static windows_package/
            cp "重要说明-不要删除templates、static文件夹.txt" windows_package/
            cd windows_package
            ${{ matrix.compress_cmd }} ../release/${{ matrix.asset_name }} *
          else
            mkdir -p package
            cp "ClashRuleSync${{ matrix.extension }}" package/
            cp LICENSE package/
            cp README.md package/
            cp -r templates package/
            cp -r static package/
            cp "重要说明-不要删除templates、static文件夹.txt" package/
            cd package
            ${{ matrix.compress_cmd }} ../release/${{ matrix.asset_name }} *
          fi

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: release/${{ matrix.asset_name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      discussions: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          files: artifacts/*/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 